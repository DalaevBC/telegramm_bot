from loader import bot
from states.low_high_price_states import UserChoiceState
from loguru import logger
from keyboards.inline.city_photo_markup import nums_keyboard


@bot.message_handler(state=UserChoiceState.min_price)
@logger.catch
def get_min_price(message):
    if message.text.isdigit():
        with bot.retrieve_data(message.from_user.id, message.chat.id) as bot_data:
            bot_data['min_price'] = message.text
            bot.delete_message(message.chat.id, message.message_id - 1)
        bot.send_message(
            message.chat.id,
            '‚ÜóÔ∏è–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–µ–ª—è –∑–∞ –Ω–æ—á—å:')
        bot.set_state(
            message.from_user.id, UserChoiceState.max_price, message.chat.id
        )
    else:
        bot.send_message(message.chat.id, '–ú–Ω–µ –Ω—É–∂–Ω—ã —Å—É—Ö–∏–µ —Ü–∏—Ñ—Ä—ã)))))')


@bot.message_handler(state=UserChoiceState.max_price)
@logger.catch
def get_max_price(message):
    with bot.retrieve_data(message.from_user.id, message.chat.id) as bot_data:
        if message.text.isdigit() and \
                int(bot_data['min_price']) < int(message.text):
            bot_data['max_price'] = message.text
            bot.delete_message(message.chat.id, message.message_id - 1)

            bot.send_message(
                message.chat.id,
                '‚ÜôÔ∏è–£–∫–∞–∂–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞ '
                '–≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö(–Ω–∞–ø—Ä–∏–º–µ—Ä 0.7 –∏–ª–∏ 1)'
            )
            bot.set_state(
                message.from_user.id, UserChoiceState.center_min, message.chat.id
                 )
        else:
            bot.send_message(message.chat.id, '–ú–Ω–µ –Ω—É–∂–Ω—ã —Å—É—Ö–∏–µ —Ü–∏—Ñ—Ä—ã)))))')


@bot.message_handler(state=UserChoiceState.center_min)
@logger.catch
def get_min_distance(message):
    if message.text.find('.' or ',') or message.text.isdigit():
        with bot.retrieve_data(message.from_user.id, message.chat.id) as bot_data:
            bot_data['center_min'] = message.text
            bot.delete_message(message.chat.id, message.message_id - 1)

        bot.send_message(
            message.chat.id,
            '‚ÜóÔ∏è–£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞ '
            '–≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö(–Ω–∞–ø—Ä–∏–º–µ—Ä 2.5 –∏–ª–∏ 5)')
        bot.set_state(
            message.from_user.id, UserChoiceState.center_max, message.chat.id
        )


@bot.message_handler(state=UserChoiceState.center_max)
@logger.catch
def get_max_distance(message):
    if message.text.find('.' or ',') or message.text.isdigit():
        with bot.retrieve_data(message.from_user.id, message.chat.id) as bot_data:
            bot_data['center_max'] = message.text
            if float(bot_data['center_min']) < float(bot_data['center_max']):
                bot.delete_message(message.chat.id, message.message_id - 1)
                bot.send_message(
                    message.chat.id,
                    'üè†–°–∫–æ–ª—å–∫–æ –æ—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑–∞—Ç—å?(–ù–µ –±–æ–ª—å—à–µ 10)',
                    reply_markup=nums_keyboard('hotels')
                )
                bot.set_state(
                    message.from_user.id,
                    UserChoiceState.hotel_quantity,
                    message.chat.id
                )
    else:
        bot.send_message(
            message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–∫–∞–∂–∏—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Ü–∏—Ñ—Ä–∞–º–∏.\n'
                             '–ï—Å–ª–∏ —á–∏—Å–ª–æ –¥—Ä–æ–±–Ω–æ–µ –µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Ç–æ—á–∫–æ–π.')
